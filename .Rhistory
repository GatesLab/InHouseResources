typeof(row.names(net_stat))
kt = knitr::kable(x =net_stat, row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
# net_stat %>%
kt
# kable_styling(kt, latex_options = "striped", full_width = F)
network_stat = data.frame("mean" = c(density_mean, overall_weight_mean, global_efficiency_mean), "sd" = c(density_sd, overall_weight_sd, global_efficiency_sd),"minimum" = c(density_range[[1]], overall_weight_range[[1]], global_efficiency_range[[1]]), "maximum" = c(density_range[[2]], overall_weight_range[[2]], global_efficiency_range[[2]]), "group" = c("Density","Overall Weight","Global Efficiency"))
p = ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
p + xlab("Metric") +
ylab("Measurement Value")
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
#
# # Group Boxplot
# stack(network_df) %>%
#   dplyr::mutate(ordered_ind = factor(ind,
#                                     levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
#   ggplot(aes(x = ordered_ind, y = values)) +
#   geom_boxplot() + xlab("Metric") +
#   ylab("Measurement Value")
#
# # Group Violin Plot
# stack(network_df) %>%
#   dplyr::mutate(ordered_ind = factor(ind,
#                                     levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
#   ggplot(aes(x = ordered_ind, y = values)) +
#   geom_violin() + xlab("Metric") +
#   ylab("Measurement Value")
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin()
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin()
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin()
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3)
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin()  + stat_summary(fun=mean, geom="point", shape=23, size=1)
density_plot
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin()  + stat_summary(fun=mean, geom="point", shape=23, size=3)
density_plot
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=3)
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=3)
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=3)
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3)
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2)
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2)
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2)
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3)
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3, top=textGrob("Network-Wide Distributions"))
library(grid)
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3, top=textGrob("Network-Wide Distributions"))
var_level_df = data.frame(variable = feature_names, variable_degrees_mean, variable_strengths_mean, betweenness_mean)
colnames(var_level_df) = c("Variable", "Variable Degrees", "Variable Strengths", "Betweenness")
ggplot(data.frame(stack(var_level_df),
variable = c(feature_names, feature_names, feature_names)), aes(x = values, y = variable)) +
geom_point() +
geom_line(group = 1, orientation = "y") +
facet_wrap( ~ ind, scales = "free") +
ggtitle("Average Comparisons on Variable Level Metrics") +
ylab("Variables") +
xlab("Average Measurement Value")
# Variable Strengths Violin Plot
ggplot(stack(data.frame(variable_strengths_mat)), aes(x ="" , y = values)) +
geom_violin() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Variable Strengths Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
xlim(-5,5)+
theme( strip.text = element_text(size = 7)) +
stat_summary(fun=mean, geom="point", shape=23, size=1)
# Variable Strengths Violin Plot
ggplot(stack(data.frame(variable_strengths_mat)), aes(x ="" , y = values)) +
geom_violin() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Variable Strengths Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
ylim(-5,5) +
theme( strip.text = element_text(size = 7)) +
stat_summary(fun=mean, geom="point", shape=23, size=1)
# Variable Strengths Violin Plot
ggplot(stack(data.frame(variable_strengths_mat)), aes(x ="" , y = values)) +
geom_violin() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Variable Strengths Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
# ylim(-5,5) +
theme( strip.text = element_text(size = 7)) +
stat_summary(fun=mean, geom="point", shape=23, size=1)
# Variable Degrees Boxplot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) +
geom_boxplot() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Variable Degrees Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme( strip.text = element_text(size = 7))
# Variable Degrees Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) +
geom_violin() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Variable Degrees Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme( strip.text = element_text(size = 7)) +
stat_summary(fun=mean, geom="point", shape=23, size=1)
# Variable Strengths Boxplot
ggplot(stack(data.frame(variable_strengths_mat)), aes(x ="" , y = values)) +
geom_boxplot() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Variable Strengths Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme( strip.text = element_text(size = 7))
# Variable Strengths Violin Plot
ggplot(stack(data.frame(variable_strengths_mat)), aes(x ="" , y = values)) +
geom_violin() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Variable Strengths Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
# ylim(-5,5) +
theme( strip.text = element_text(size = 7)) +
stat_summary(fun=mean, geom="point", shape=23, size=1)
# Betweenness Boxplot
ggplot(stack(data.frame(betweenness_mat)), aes(x ="" , y = values)) +
geom_boxplot() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Betweenness Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme( strip.text = element_text(size = 7))
# Betweenness Violin Plot
ggplot(stack(data.frame(betweenness_mat)), aes(x ="" , y = values)) +
geom_violin() +
facet_wrap(~ ind, ncol = 13) +
ggtitle("Betweenness Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme( strip.text = element_text(size = 7)) +
stat_summary(fun=mean, geom="point", shape=23, size=1)
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("")
density_plot
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("")
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2)
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2)
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3, top=textGrob("Network-Wide Distributions"))
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("Density")
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("Global Efficiency")
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("Overall Weight")
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3, top=textGrob("Network-Wide Distributions"))
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("Density") + ylab("")
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("Global Efficiency") + ylab("")
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin() + stat_summary(fun=mean, geom="point", shape=23, size=2) + xlab("Overall Weight") + ylab("")
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3, top=textGrob("Network-Wide Distributions"))
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) +
geom_violin() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
xlab("Density") +
ylab("")
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) +
geom_violin() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
xlab("Global Efficiency") +
ylab("")
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) +
geom_violin() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
xlab("Overall Weight") +
ylab("")
grid.arrange(density_plot, efficiency_plot, overall_weight_plot, ncol = 3, top=textGrob("Network-Wide Distributions"))
knitr::opts_chunk$set(echo = TRUE)
library(brainGraph)
library(igraph)
library(tidyverse, ggplot2)
library(grid)
library(gridExtra)
library(knitr)
# library(kableExtra)
# Read in data
load("~/Desktop/School/GatesLab/NetworkAnalysis/FullMatrices.Rdata")
head(outReg)
# Read in data
load("~/Desktop/School/GatesLab/NetworkAnalysis/FullMatrices.Rdata")
# Preview all data
# head(outReg)
knitr::opts_chunk$set(echo = TRUE)
library(brainGraph)
library(igraph)
library(tidyverse, ggplot2)
library(grid)
library(gridExtra)
library(knitr)
# library(kableExtra)
# Read in data
load("~/Desktop/School/GatesLab/NetworkAnalysis/FullMatrices.Rdata")
# Preview all data
# head(outReg)
submatrix = list()
for (x in 1:length(outReg)) {
submatrix = append(submatrix, list(outReg[[x]][["regression_matrix"]][1:26, 1:26]))
}
# Convert all submatrices into double type
feature_names = c("energetic", "enthusiastic", "content", "irritable", "restless",
"worried", "guilty",  "afraid", "anhedonia", "angry","hopeless",
"down", "positive", "fatigue", "tension", "concentrate", "accepted",
"threatened", "ruminate", "avoid_act", "reassure", "procrast",
"hours", "difficult", "unsatisfy", "avoid_people")
subdf = list()
subdf_pos = list()
for (x in 1:length(outReg)) {
subdf[[x]] = matrix(
unlist(submatrix[x]),
ncol = 26,
byrow = FALSE,
dimnames = list(feature_names, feature_names)
)
subdf_pos[[x]] = pmax(subdf[[x]], 0)
}
dir_graph = list()
dir_graph_pos = list()
for (x in 1:length(outReg)) {
dir_graph[[x]] = graph.adjacency(subdf[[x]],
mode = "directed",
weighted = TRUE)
dir_graph_pos[[x]] = graph.adjacency(subdf_pos[[x]],
mode = "directed",
weighted = TRUE)
}
dir_graph[[19]]
dir_graph_pos[[19]]
density = list()
overall_weight = list()
edge_weights = list()
global_efficiency = list()
variable_degrees = list()
variable_strengths = list()
betweenness = list()
cluster = list()
for (x in 1:length(outReg)) {
density[[x]] = edge_density(dir_graph[[x]], loops = FALSE)
overall_weight[[x]] = sum(strength(dir_graph[[x]]))
edge_weights[[x]] = edge_attr(dir_graph_pos[[x]], "weight")
global_efficiency[[x]] = efficiency(dir_graph_pos[[x]],
type = c("global"),
weights = edge_weights[[x]])
variable_degrees[[x]] = degree(dir_graph[[x]])
variable_strengths[[x]] = strength(dir_graph[[x]])
betweenness[[x]] = estimate_betweenness(dir_graph_pos[[x]],
cutoff = -1, weights = edge_weights[[x]])
cluster[[x]] = cluster_walktrap(
dir_graph_pos[[x]],
weights = E(dir_graph_pos[[x]])$edge_weights,
steps = 4
)
}
print(paste0("Density of the first person's graph: ", round(density[[1]], 4)))
print(paste0(
"Overall Weight of the first person's graph: ",
round(overall_weight[[1]], 4)
))
print(paste0(
"Global Efficiency of the first person's graph: ",
round(global_efficiency[[1]], 4)
))
print("Degree of each variable in the first person's graph: ")
print(variable_degrees[[1]])
print("Strengths of each variable in the first person's graph: ")
print(variable_strengths[[1]])
print("Betweenness Centrality of each variable in the first person's graph: ")
print(betweenness[[1]])
print("Clustering Walktrap of each variable in the first person's graph: ")
print(cluster[[1]])
density_mean = mean(unlist(density))
density_sd = sd(unlist(density))
density_range = range(unlist(density))
overall_weight_mean = mean(unlist(overall_weight))
overall_weight_sd = sd(unlist(overall_weight))
overall_weight_range = range(unlist(overall_weight))
global_efficiency_mean = mean(unlist(global_efficiency))
global_efficiency_sd = sd(unlist(global_efficiency))
global_efficiency_range = range(unlist(global_efficiency))
variable_degrees_mat = do.call(rbind, variable_degrees)
variable_degrees_mean = apply(variable_degrees_mat, 2, mean)
variable_degrees_sd = apply(variable_degrees_mat, 2, sd)
variable_degrees_range = apply(variable_degrees_mat, 2, range)
variable_strengths_mat = do.call(rbind, variable_strengths)
variable_strengths_mean = apply(variable_strengths_mat, 2, mean)
variable_strengths_sd = apply(variable_strengths_mat, 2, sd)
variable_strengths_range = apply(variable_strengths_mat, 2, range)
betweenness_mat = do.call(rbind, betweenness)
betweenness_mean = apply(betweenness_mat, 2, mean)
betweenness_sd = apply(betweenness_mat, 2, sd)
betweenness_range = apply(betweenness_mat, 2, range)
# Store all summary stats into a DataFrame
net_stat = data.frame(
"Density" = c(density_mean, density_sd, density_range),
"Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range),
"Global Efficiency" = c(
global_efficiency_mean,
global_efficiency_sd,
global_efficiency_range
)
)
row.names(net_stat) = c("Mean", "Standard Deviation", "Minimum", "Maximum")
# attr(net_stat, "row.names")
typeof(row.names(net_stat))
kt = knitr::kable(
x = net_stat,
row.names = TRUE,
col.names = c("Density", "Overvall Weight", "Global Efficiency")
)
# net_stat %>%
kt
# kable_styling(kt, latex_options = "striped", full_width = F)
# Combine network-wide metrics into a dataframe
network_df = data.frame(
"Density" = unlist(density),
"Overall Weight" = unlist(overall_weight),
"Global Efficiency" = unlist(global_efficiency)
)
# Violin Plots
density_plot = ggplot(network_df, aes(y = Density, x = "")) +
geom_violin() +
stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 2
) +
xlab("Density") +
ylab("")
efficiency_plot = ggplot(network_df, aes(y = Global.Efficiency, x = "")) +
geom_violin() +
stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 2
) +
xlab("Global Efficiency") +
ylab("")
overall_weight_plot = ggplot(network_df, aes(y = Overall.Weight, x = "")) +
geom_violin() +
stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 2
) +
xlab("Overall Weight") +
ylab("")
grid.arrange(
density_plot,
efficiency_plot,
overall_weight_plot,
ncol = 3,
top = textGrob("Network-Wide Distributions")
)
# Variable Degrees Boxplot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x = "" , y = values)) +
geom_boxplot() +
facet_wrap( ~ ind, ncol = 13) +
ggtitle("Variable Degrees Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme(strip.text = element_text(size = 7))
# Variable Degrees Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x = "" , y = values)) +
geom_violin() +
facet_wrap( ~ ind, ncol = 13) +
ggtitle("Variable Degrees Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme(strip.text = element_text(size = 7)) +
stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 1
)
# Variable Strengths Boxplot
ggplot(stack(data.frame(variable_strengths_mat)), aes(x = "" , y = values)) +
geom_boxplot() +
facet_wrap( ~ ind, ncol = 13) +
ggtitle("Variable Strengths Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme(strip.text = element_text(size = 7))
# Variable Strengths Violin Plot
ggplot(stack(data.frame(variable_strengths_mat)), aes(x = "" , y = values)) +
geom_violin() +
facet_wrap( ~ ind, ncol = 13) +
ggtitle("Variable Strengths Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
# ylim(-5,5) +
theme(strip.text = element_text(size = 7)) +
stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 1
)
# Betweenness Boxplot
ggplot(stack(data.frame(betweenness_mat)), aes(x = "" , y = values)) +
geom_boxplot() +
facet_wrap( ~ ind, ncol = 13) +
ggtitle("Betweenness Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme(strip.text = element_text(size = 7))
# Betweenness Violin Plot
ggplot(stack(data.frame(betweenness_mat)), aes(x = "" , y = values)) +
geom_violin() +
facet_wrap( ~ ind, ncol = 13) +
ggtitle("Betweenness Distributions") +
xlab("Variables") +
ylab("Measurement Value") +
theme(strip.text = element_text(size = 7)) +
stat_summary(
fun = mean,
geom = "point",
shape = 23,
size = 1
)
var_level_df = data.frame(variable = feature_names,
variable_degrees_mean,
variable_strengths_mean,
betweenness_mean)
colnames(var_level_df) =
c("Variable",
"Variable Degrees",
"Variable Strengths",
"Betweenness")
ggplot(data.frame(
stack(var_level_df),
variable = c(feature_names, feature_names, feature_names)
),
aes(x = values, y = variable)) +
geom_point() +
geom_line(group = 1, orientation = "y") +
facet_wrap(~ ind, scales = "free") +
ggtitle("Average Comparisons on Variable Level Metrics") +
ylab("Variables") +
xlab("Average Measurement Value")
# Read in data
load("~/Desktop/School/GatesLab/NetworkAnalysis/FullMatrices.Rdata")
# Preview all data
# head(outReg)
submatrix = list()
for (x in 1:length(outReg)) {
submatrix = append(submatrix, list(outReg[[x]][["regression_matrix"]][1:26, 1:26]))
}
# Convert all submatrices into double type
feature_names = c("energetic", "enthusiastic", "content", "irritable", "restless",
"worried", "guilty",  "afraid", "anhedonia", "angry","hopeless",
"down", "positive", "fatigue", "tension", "concentrate", "accepted",
"threatened", "ruminate", "avoid_act", "reassure", "procrast",
"hours", "difficult", "unsatisfy", "avoid_people")
subdf = list()
subdf_pos = list()
for (x in 1:length(outReg)) {
subdf[[x]] = matrix(
unlist(submatrix[x]),
ncol = 26,
byrow = FALSE,
dimnames = list(feature_names, feature_names)
)
subdf_pos[[x]] = pmax(subdf[[x]], 0)
}
dir_graph = list()
dir_graph_pos = list()
for (x in 1:length(outReg)) {
dir_graph[[x]] = graph.adjacency(subdf[[x]],
mode = "directed",
weighted = TRUE)
dir_graph_pos[[x]] = graph.adjacency(subdf_pos[[x]],
mode = "directed",
weighted = TRUE)
}
dir_graph[[19]]
dir_graph_pos[[19]]
knitr::opts_chunk$set(echo = TRUE)
library(brainGraph, warn.conflicts=F, quietly=T)
library(igraph, warn.conflicts=F, quietly=T)
library(tidyverse, ggplot2, warn.conflicts=F, quietly=T)
library(grid, warn.conflicts=F, quietly=T)
library(gridExtra, warn.conflicts=F, quietly=T)
library(knitr, warn.conflicts=F, quietly=T)
# library(kableExtra)
