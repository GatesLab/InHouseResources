dir_graph[[x]] = graph.adjacency(subdf[[x]], mode = "directed", weighted = TRUE)
dir_graph_pos[[x]] = graph.adjacency(subdf_pos[[x]], mode = "directed", weighted = TRUE)
}
dir_graph[[19]]
dir_graph_pos[[19]]
density = list()
overall_weight = list()
edge_weights = list()
global_efficiency = list()
variable_degrees = list()
variable_strengths = list()
betweenness = list()
cluster = list()
for(x in 1:length(outReg)) {
density[[x]] = edge_density(dir_graph[[x]], loops = FALSE)
overall_weight[[x]] = sum(strength(dir_graph[[x]]))
edge_weights[[x]] = edge_attr(dir_graph_pos[[x]], "weight")
global_efficiency[[x]] = efficiency(dir_graph_pos[[x]],
type = c("global"),
weights = edge_weights[[x]])
variable_degrees[[x]] = degree(dir_graph[[x]])
variable_strengths[[x]] = strength(dir_graph[[x]])
betweenness[[x]] = estimate_betweenness(dir_graph_pos[[x]], cutoff=-1, weights =edge_weights[[x]])
cluster[[x]] = cluster_walktrap(dir_graph_pos[[x]],
weights = E(dir_graph_pos[[x]])$edge_weights,
steps = 4)
}
print(paste0("Density of the first person's graph: ", round(density[[1]], 4)))
print(paste0("Overall Weight of the first person's graph: ", round(overall_weight[[1]], 4)))
print(paste0("Global Efficiency of the first person's graph: ", round(global_efficiency[[1]], 4)))
print("Degree of each variable in the first person's graph: ")
print(variable_degrees[[1]])
print("Strengths of each variable in the first person's graph: ")
print(variable_strengths[[1]])
print("Betweenness Centrality of each variable in the first person's graph: ")
print(betweenness[[1]])
print("Clustering Walktrap of each variable in the first person's graph: ")
print(cluster[[1]])
density_mean = mean(unlist(density))
density_sd = sd(unlist(density))
density_range = range(unlist(density))
overall_weight_mean = mean(unlist(overall_weight))
overall_weight_sd = sd(unlist(overall_weight))
overall_weight_range = range(unlist(overall_weight))
global_efficiency_mean = mean(unlist(global_efficiency))
global_efficiency_sd = sd(unlist(global_efficiency))
global_efficiency_range = range(unlist(global_efficiency))
variable_degrees_mat = do.call(rbind, variable_degrees)
variable_degrees_mean = apply(variable_degrees_mat, 2, mean)
variable_degrees_sd = apply(variable_degrees_mat, 2, sd)
variable_degrees_range = apply(variable_degrees_mat, 2, range)
variable_strengths_mat = do.call(rbind, variable_strengths)
variable_strengths_mean = apply(variable_strengths_mat, 2, mean)
variable_strengths_sd = apply(variable_strengths_mat, 2, sd)
variable_strengths_range = apply(variable_strengths_mat, 2, range)
betweenness_mat = do.call(rbind, betweenness)
betweenness_mean = apply(betweenness_mat, 2, mean)
betweenness_sd = apply(betweenness_mat, 2, sd)
betweenness_range = apply(betweenness_mat, 2, range)
network_stat = data.frame("mean" = c(density_mean, overall_weight_mean, global_efficiency_mean), "sd" = c(density_sd, overall_weight_sd, global_efficiency_sd),"minimum" = c(density_range[[1]], overall_weight_range[[1]], global_efficiency_range[[1]]), "maximum" = c(density_range[[2]], overall_weight_range[[2]], global_efficiency_range[[2]]), "group" = c("Density","Overall Weight","Global Efficiency"))
p = ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
p +
xlab("Metric") +
ylab("Measurement Value")
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
stack(network_df) %>%
dplyr::mutate(ordered_ind = factor(ind,
levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
ggplot(aes(x = ordered_ind, y = values)) +
geom_boxplot() + xlab("Metric") +
ylab("Measurement Value")
network_violin = stack(network_df) %>%
dplyr::mutate(ordered_ind = factor(ind,
levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
ggplot(aes(x = ordered_ind, y = values)) +
geom_violin() + xlab("Metric") +
ylab("Measurement Value")
ggplot(network_df, aes(y = Density, x = "")) + geom_violin()
ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin()
ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin()
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_boxplot() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7))
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7))
ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
+
xlab("Metric") +
ylab("Measurement Value")
ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
+  xlab("Metric") +
ylab("Measurement Value")
ggplot(network_stat, aes(x = as.factor(group))) + xlab("Metric")
ggplot(network_stat, aes(x = as.factor(group))) + xlab("Metric") +ylab("Measurement Value")
ggplot(network_stat, aes(x = as.factor(group))) + xlab("Metric") +ylab("Measurement Value")
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
network_stat = data.frame("mean" = c(density_mean, overall_weight_mean, global_efficiency_mean), "sd" = c(density_sd, overall_weight_sd, global_efficiency_sd),"minimum" = c(density_range[[1]], overall_weight_range[[1]], global_efficiency_range[[1]]), "maximum" = c(density_range[[2]], overall_weight_range[[2]], global_efficiency_range[[2]]), "group" = c("Density","Overall Weight","Global Efficiency"))
p = ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
p = xlab("Metric") +
ylab("Measurement Value")
network_stat = data.frame("mean" = c(density_mean, overall_weight_mean, global_efficiency_mean), "sd" = c(density_sd, overall_weight_sd, global_efficiency_sd),"minimum" = c(density_range[[1]], overall_weight_range[[1]], global_efficiency_range[[1]]), "maximum" = c(density_range[[2]], overall_weight_range[[2]], global_efficiency_range[[2]]), "group" = c("Density","Overall Weight","Global Efficiency"))
p = ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
p + xlab("Metric") +
ylab("Measurement Value")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("brainGraph")
library(brainGraph)
library(igraph)
library(tidyverse, ggplot2)
# Read in data
load("~/Desktop/School/GatesLab/NetworkAnalysis/FullMatrices.Rdata")
# Preview all data
# View(outReg)
submatrix = list()
for (x in 1:length(outReg)) {
submatrix = append(submatrix, list(outReg[[x]][["regression_matrix"]][1:26,1:26]))
}
# Convert all submatrices into double type
feature_names = c("energetic", "enthusiastic", "content", "irritable", "restless", "worried", "guilty",  "afraid", "anhedonia", "angry","hopeless", "down", "positive", "fatigue", "tension", "concentrate", "accepted", "threatened", "ruminate", "avoid_act", "reassure", "procrast", "hours", "difficult", "unsatisfy", "avoid_people")
subdf = list()
subdf_pos = list()
for (x in 1:length(outReg)) {
subdf[[x]] = matrix(unlist(submatrix[x]), ncol = 26, byrow = FALSE, dimnames = list(feature_names, feature_names))
subdf_pos[[x]] = pmax(subdf[[x]], 0)
}
dir_graph = list()
dir_graph_pos = list()
for(x in 1:length(outReg) ){
dir_graph[[x]] = graph.adjacency(subdf[[x]], mode = "directed", weighted = TRUE)
dir_graph_pos[[x]] = graph.adjacency(subdf_pos[[x]], mode = "directed", weighted = TRUE)
}
dir_graph[[19]]
dir_graph_pos[[19]]
density = list()
overall_weight = list()
edge_weights = list()
global_efficiency = list()
variable_degrees = list()
variable_strengths = list()
betweenness = list()
cluster = list()
for(x in 1:length(outReg)) {
density[[x]] = edge_density(dir_graph[[x]], loops = FALSE)
overall_weight[[x]] = sum(strength(dir_graph[[x]]))
edge_weights[[x]] = edge_attr(dir_graph_pos[[x]], "weight")
global_efficiency[[x]] = efficiency(dir_graph_pos[[x]],
type = c("global"),
weights = edge_weights[[x]])
variable_degrees[[x]] = degree(dir_graph[[x]])
variable_strengths[[x]] = strength(dir_graph[[x]])
betweenness[[x]] = estimate_betweenness(dir_graph_pos[[x]], cutoff=-1, weights =edge_weights[[x]])
cluster[[x]] = cluster_walktrap(dir_graph_pos[[x]],
weights = E(dir_graph_pos[[x]])$edge_weights,
steps = 4)
}
print(paste0("Density of the first person's graph: ", round(density[[1]], 4)))
print(paste0("Overall Weight of the first person's graph: ", round(overall_weight[[1]], 4)))
print(paste0("Global Efficiency of the first person's graph: ", round(global_efficiency[[1]], 4)))
print("Degree of each variable in the first person's graph: ")
print(variable_degrees[[1]])
print("Strengths of each variable in the first person's graph: ")
print(variable_strengths[[1]])
print("Betweenness Centrality of each variable in the first person's graph: ")
print(betweenness[[1]])
print("Clustering Walktrap of each variable in the first person's graph: ")
print(cluster[[1]])
density_mean = mean(unlist(density))
density_sd = sd(unlist(density))
density_range = range(unlist(density))
overall_weight_mean = mean(unlist(overall_weight))
overall_weight_sd = sd(unlist(overall_weight))
overall_weight_range = range(unlist(overall_weight))
global_efficiency_mean = mean(unlist(global_efficiency))
global_efficiency_sd = sd(unlist(global_efficiency))
global_efficiency_range = range(unlist(global_efficiency))
variable_degrees_mat = do.call(rbind, variable_degrees)
variable_degrees_mean = apply(variable_degrees_mat, 2, mean)
variable_degrees_sd = apply(variable_degrees_mat, 2, sd)
variable_degrees_range = apply(variable_degrees_mat, 2, range)
variable_strengths_mat = do.call(rbind, variable_strengths)
variable_strengths_mean = apply(variable_strengths_mat, 2, mean)
variable_strengths_sd = apply(variable_strengths_mat, 2, sd)
variable_strengths_range = apply(variable_strengths_mat, 2, range)
betweenness_mat = do.call(rbind, betweenness)
betweenness_mean = apply(betweenness_mat, 2, mean)
betweenness_sd = apply(betweenness_mat, 2, sd)
betweenness_range = apply(betweenness_mat, 2, range)
network_stat = data.frame("mean" = c(density_mean, overall_weight_mean, global_efficiency_mean), "sd" = c(density_sd, overall_weight_sd, global_efficiency_sd),"minimum" = c(density_range[[1]], overall_weight_range[[1]], global_efficiency_range[[1]]), "maximum" = c(density_range[[2]], overall_weight_range[[2]], global_efficiency_range[[2]]), "group" = c("Density","Overall Weight","Global Efficiency"))
p = ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
p + xlab("Metric") +
ylab("Measurement Value")
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
# Group Boxplot
stack(network_df) %>%
dplyr::mutate(ordered_ind = factor(ind,
levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
ggplot(aes(x = ordered_ind, y = values)) +
geom_boxplot() + xlab("Metric") +
ylab("Measurement Value")
# Group Violin Plot
stack(network_df) %>%
dplyr::mutate(ordered_ind = factor(ind,
levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
ggplot(aes(x = ordered_ind, y = values)) +
geom_violin() + xlab("Metric") +
ylab("Measurement Value")
# Individual Violin Plots
ggplot(network_df, aes(y = Density, x = "")) + geom_violin()
ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin()
ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin()
# Boxplot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_boxplot() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7))
# Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7))
knitr::opts_chunk$set(echo = TRUE)
# install.packages("brainGraph")
library(brainGraph)
library(igraph)
library(tidyverse, ggplot2)
# Read in data
load("~/Desktop/School/GatesLab/NetworkAnalysis/FullMatrices.Rdata")
# Preview all data
# View(outReg)
submatrix = list()
for (x in 1:length(outReg)) {
submatrix = append(submatrix, list(outReg[[x]][["regression_matrix"]][1:26,1:26]))
}
# Convert all submatrices into double type
feature_names = c("energetic", "enthusiastic", "content", "irritable", "restless", "worried", "guilty",  "afraid", "anhedonia", "angry","hopeless", "down", "positive", "fatigue", "tension", "concentrate", "accepted", "threatened", "ruminate", "avoid_act", "reassure", "procrast", "hours", "difficult", "unsatisfy", "avoid_people")
subdf = list()
subdf_pos = list()
for (x in 1:length(outReg)) {
subdf[[x]] = matrix(unlist(submatrix[x]), ncol = 26, byrow = FALSE, dimnames = list(feature_names, feature_names))
subdf_pos[[x]] = pmax(subdf[[x]], 0)
}
dir_graph = list()
dir_graph_pos = list()
for(x in 1:length(outReg) ){
dir_graph[[x]] = graph.adjacency(subdf[[x]], mode = "directed", weighted = TRUE)
dir_graph_pos[[x]] = graph.adjacency(subdf_pos[[x]], mode = "directed", weighted = TRUE)
}
dir_graph[[19]]
dir_graph_pos[[19]]
density = list()
overall_weight = list()
edge_weights = list()
global_efficiency = list()
variable_degrees = list()
variable_strengths = list()
betweenness = list()
cluster = list()
for(x in 1:length(outReg)) {
density[[x]] = edge_density(dir_graph[[x]], loops = FALSE)
overall_weight[[x]] = sum(strength(dir_graph[[x]]))
edge_weights[[x]] = edge_attr(dir_graph_pos[[x]], "weight")
global_efficiency[[x]] = efficiency(dir_graph_pos[[x]],
type = c("global"),
weights = edge_weights[[x]])
variable_degrees[[x]] = degree(dir_graph[[x]])
variable_strengths[[x]] = strength(dir_graph[[x]])
betweenness[[x]] = estimate_betweenness(dir_graph_pos[[x]], cutoff=-1, weights =edge_weights[[x]])
cluster[[x]] = cluster_walktrap(dir_graph_pos[[x]],
weights = E(dir_graph_pos[[x]])$edge_weights,
steps = 4)
}
print(paste0("Density of the first person's graph: ", round(density[[1]], 4)))
print(paste0("Overall Weight of the first person's graph: ", round(overall_weight[[1]], 4)))
print(paste0("Global Efficiency of the first person's graph: ", round(global_efficiency[[1]], 4)))
print("Degree of each variable in the first person's graph: ")
print(variable_degrees[[1]])
print("Strengths of each variable in the first person's graph: ")
print(variable_strengths[[1]])
print("Betweenness Centrality of each variable in the first person's graph: ")
print(betweenness[[1]])
print("Clustering Walktrap of each variable in the first person's graph: ")
print(cluster[[1]])
density_mean = mean(unlist(density))
density_sd = sd(unlist(density))
density_range = range(unlist(density))
overall_weight_mean = mean(unlist(overall_weight))
overall_weight_sd = sd(unlist(overall_weight))
overall_weight_range = range(unlist(overall_weight))
global_efficiency_mean = mean(unlist(global_efficiency))
global_efficiency_sd = sd(unlist(global_efficiency))
global_efficiency_range = range(unlist(global_efficiency))
variable_degrees_mat = do.call(rbind, variable_degrees)
variable_degrees_mean = apply(variable_degrees_mat, 2, mean)
variable_degrees_sd = apply(variable_degrees_mat, 2, sd)
variable_degrees_range = apply(variable_degrees_mat, 2, range)
variable_strengths_mat = do.call(rbind, variable_strengths)
variable_strengths_mean = apply(variable_strengths_mat, 2, mean)
variable_strengths_sd = apply(variable_strengths_mat, 2, sd)
variable_strengths_range = apply(variable_strengths_mat, 2, range)
betweenness_mat = do.call(rbind, betweenness)
betweenness_mean = apply(betweenness_mat, 2, mean)
betweenness_sd = apply(betweenness_mat, 2, sd)
betweenness_range = apply(betweenness_mat, 2, range)
# store all summary stats in a df, build out table functionalities
network_stat = data.frame("mean" = c(density_mean, overall_weight_mean, global_efficiency_mean), "sd" = c(density_sd, overall_weight_sd, global_efficiency_sd),"minimum" = c(density_range[[1]], overall_weight_range[[1]], global_efficiency_range[[1]]), "maximum" = c(density_range[[2]], overall_weight_range[[2]], global_efficiency_range[[2]]), "group" = c("Density","Overall Weight","Global Efficiency"))
p = ggplot(network_stat, aes(x = as.factor(group))) +
geom_boxplot(aes(
lower = mean - sd,
upper = mean + sd,
middle = mean,
ymin = minimum,
ymax = maximum),
stat = "identity")
p + xlab("Metric") +
ylab("Measurement Value")
# par(mfrow=3)
# Combine in network-wide metrics into a dataframe
network_df = data.frame("Density" = unlist(density), "Overall Weight" = unlist(overall_weight), "Global Efficiency" = unlist(global_efficiency))
# Group Boxplot
stack(network_df) %>%
dplyr::mutate(ordered_ind = factor(ind,
levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
ggplot(aes(x = ordered_ind, y = values)) +
geom_boxplot() + xlab("Metric") +
ylab("Measurement Value")
# Group Violin Plot
stack(network_df) %>%
dplyr::mutate(ordered_ind = factor(ind,
levels = c("Density", "Global.Efficiency", "Overall.Weight"))) %>%
ggplot(aes(x = ordered_ind, y = values)) +
geom_violin() + xlab("Metric") +
ylab("Measurement Value")
# Individual Violin Plots
ggplot(network_df, aes(y = Density, x = "")) + geom_violin()
ggplot(network_df, aes(y = Global.Efficiency, x = "")) + geom_violin()
ggplot(network_df, aes(y = Overall.Weight, x = "")) + geom_violin()
# Boxplot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_boxplot() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7))
# Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7))
# Add a point for the mean on violin plots
# Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7)) + stat_summary(fun.y=mean, geom="point", shape=23, size=2)
# Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7)) + stat_summary(fun.y=mean, geom="point", shape=23, size=2) + stat_summary(fun.y=median, geom="point", shape=20, size=2)
# Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7)) + stat_summary(fun.y=mean, geom="point", shape=23, size=1)
# Boxplot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_boxplot() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7)) + stat_summary(fun.y=mean, geom="point", shape=23, size=1)
knit_with_parameters('~/Documents/GitHub/InHouseResources/NetworkAnalysis.Rmd')
# Boxplot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_boxplot() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7))
# Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7)) + stat_summary(fun.y=mean, geom="point", shape=23, size=1)
# Violin Plot
ggplot(stack(data.frame(variable_degrees_mat)), aes(x ="" , y = values)) + geom_violin() + facet_wrap(~ ind, ncol = 13) +xlab("Variables") + ylab("Measurement Value") +theme( strip.text = element_text(size = 7)) + stat_summary(fun=mean, geom="point", shape=23, size=1)
data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range))
kable(data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range)))
library(kableExtra)
kable(data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range)))
data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range)
data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range))
data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range))
kable(data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range)), row.names = c("Density, Overvall Weight, Global Efficiency"), col.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"))
kable(data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range)), row.names = c("Density", "Overvall Weight", "Global Efficiency"), col.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"))
kable(data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range)), col.names = c("Density", "Overvall Weight", "Global Efficiency"), row.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"))
knitr::kable(data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range)), col.names = c("Density", "Overvall Weight", "Global Efficiency"), row.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"))
net_stat = data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range))
knitr::kable(net_stat, col.names = c("Density", "Overvall Weight", "Global Efficiency"), row.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"))
knitr::kable(net_stat,  row.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"),col.names = c("Density", "Overvall Weight", "Global Efficiency")
knitr::kable(net_stat,  row.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"),col.names = c("Density", "Overvall Weight", "Global Efficiency"))
kable(net_stat,  row.names = c("Mean", "Standard Deviation", "Minimum", "Maximum"),col.names = c("Density", "Overvall Weight", "Global Efficiency"))
kable(net_stat,  row.names = c('Mean', 'Standard Deviation', 'Minimum', 'Maximum'))
kable(net_stat)
kable(net_stat,  row.names =character(c('Mean', 'Standard Deviation', 'Minimum', 'Maximum')))
kable(net_stat, 'html)
kable(net_stat, 'html')
library(knitr)
kable(net_stat, 'html')
kable(net_stat, 'html', row.names = c('Mean', 'Standard Deviation', 'Minimum', 'Maximum'))
kable(net_stat, 'html', row.names = c('Mean'))
kable(net_stat, 'html', row.names = c('M'))
kable(net_stat, 'html', row.names = "n")
row.names(net_stat)
row.names(net_stat) = c('Mean', 'Standard Deviation', 'Minimum', 'Maximum')
row.names(net_stat)
kable(net_stat, 'html', row.names = row.names(net_stat))
net_stat = data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range))
row.names(net_stat)
typeof(row.names)
typeof(row.names(net_stat))
net_stat
row.names(net_stat)
kable(head(mtcars), 'html')
mtcars
row.names(mtcars)
typeof(row.names(mtcars))
row.names(mtcars)
row.names(mtcars)[2]
row.names(net_stat) = c("Mean", "Standard Deviation", "Minimum", "Maximum")
typeof(row.names(net_stat))
attr(net_stat, "row.names")
deparse(net_stat)
row.names(net_stat)
typeof(row.names(net_stat))
.
kable(net_stat, 'html', row.names =row.names(net_stat))
kable(x =net_stat, 'html', row.names =row.names(net_stat))
kable(x =net_stat, 'html', row.names =row.names(net_stat))
kable(x =net_stat, 'html', row.names =TRUE)
kable(x =net_stat, 'html', row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency")
,  row.names =c('Mean', 'Standard Deviation', 'Minimum', 'Maximum')))
kable(x =net_stat, 'html', row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
net_stat = data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range))
row.names(net_stat) = c("Mean", "Standard Deviation", "Minimum", "Maximum")
attr(net_stat, "row.names")
#deparse(net_stat)
typeof(row.names(net_stat))
kable(x =net_stat, 'html', row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
net_stat = data.frame("Density" = c(density_mean, density_sd, density_range), "Overall Weight" = c(overall_weight_mean, overall_weight_sd, overall_weight_range), "Global Efficiency" = c(global_efficiency_mean, global_efficiency_sd, global_efficiency_range))
row.names(net_stat) = c("Mean", "Standard Deviation", "Minimum", "Maximum")
typeof(row.names(net_stat))
kable(x =net_stat, 'html', row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
knitr::kable(x =net_stat, 'html', row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
knitr::kable(x =net_stat, row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
knitr::kable(x =net_stat, row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
net_stat %>%
kable_classic(full_width = F, html_font = "Cambria")
library(kableExtra)
net_stat %>%
kable_classic(full_width = F, html_font = "Cambria")
net_stat %>%
kable_classic(full_width = F, html_font = "Cambria")
kable_classic(full_width = F, html_font = "Cambria")
kt = knitr::kable(x =net_stat, row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
kable_styling(kt, full_width = F, html_font = "Cambria")
kable_styling(kt, full_width = F)
kable_styling(kt, "striped", full_width = F)
kable_styling(kt, latex_options = "striped", full_width = F)
library(kableExtra)
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("brainGraph")
library(brainGraph)
library(igraph)
library(tidyverse, ggplot2)
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
library(kableExtra)
remove.packages(c("kableExtra", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("kableExtra")
install.packages('data.table', dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
install.packages("data.table", dependencies = TRUE)
library(kableExtra)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
library(brainGraph)
library(kableExtra)
library(knitr)
kable_styling(kt, latex_options = "striped", full_width = F)
kt = knitr::kable(x =net_stat, row.names =TRUE, col.names = c("Density", "Overvall Weight", "Global Efficiency"))
# net_stat %>%
kt
